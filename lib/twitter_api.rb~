require 'net/http'
require 'rss/2.0'

module TwitterApi

  UPDATE = "http://twitter.com/statuses/update"
  REPLIES = "http://twitter.com/statuses/replies"
  USER_TIMELINE = "http://twitter.com/statuses/user_timeline"
  FRIENDS_TIMELINE = "http://twitter.com/statuses/friends_timeline"
  DIRECT_MESSAGES = "http://twitter.com/direct_messages"
  DIRECT_MESSAGES_SENT = "http://twitter.com/direct_messages/sent"
  DIRECT_MESSAGE_NEW = "http://twitter.com/direct_messages/new"
  FRIENDS = "http://twitter.com/friends/ids"
  FOLLOWERS = "http://twitter.com/followers/ids"
  SEARCH = "http://search.twitter.com/search"

  class Connection
  
    attr_accessor :http, :url

    def initialize(url, format = :json)
      url +=  ".#{format.to_s}"
      @url = URI.parse(url)
      @http = Net::HTTP.new(@url.host, @url.port)
      @http.read_timeout = 4
      @http.open_timeout = 4
    end

  end

  class << self
    
    # Updates the authenticating user's status
    # methods : POST
    # parameters : status
    # Formats : xml, json
    def update(status, format = :json)
      connection = Connection.new TwitterApi::UPDATE, format
      connection.http.start do |http|
      	req = Net::HTTP::Post.new(connection.url.path)
    	   req.basic_auth TechWhizBang.r2_config['user'], TechWhizBang.r2_config['password']
    		req.set_form_data({'status' => status})
    		response = http.request(req)
    		body_format_conversion(response.body, format)
      end
      connection.post(connection.url.path, {:status => status}) { |body_segment|  }
    end

    # Returns the 20 most recent @replies
    # methods : GET
    # Formats : xml, json, rss, atom
    def replies(format = :json)
      connection = Connection.new TwitterApi::REPLIES, format
    end

    def friends(format = :json)

    end

    def user_timeline
      connection = Connection.new TwitterApi::USER_TIMELINE
    end

    def search(keywords, options = {:rpp => 20, :show_user => "true"}, format = :json)
    	options = options.merge({:q => keywords})
    	query_params = "?#{options.to_query}"
      connection = Connection.new TwitterApi::SEARCH, format
      connection.http.start do |http|
    		req = Net::HTTP::Get.new(connection.url.path + query_params, 
    			{"User-Agent" => "#{TechWhizBang.r2_config['useragent']}"})
    		response = http.request(req)
    		body_format_conversion(response.body, format)
  		end
    end

    def find_user(user)

    end

    def direct_message(user, message)
      connection = Connection.new Twitter::DIRECT_MESSAGE_NEW
    end
    
    protected
    
    def body_format_conversion(body, format)
    	format == :json ? ActiveSupport::JSON.decode(body) : body
    end

  end
  
end
